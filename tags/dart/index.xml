<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Dart on loveky的流水账</title>
    <link>https://loveky.github.io/tags/dart/</link>
    <description>Recent content in Dart on loveky的流水账</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 05 Jul 2018 11:01:54 +0800</lastBuildDate>
    
	<atom:link href="https://loveky.github.io/tags/dart/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>利用蓝灯为命令行配置HTTP代理</title>
      <link>https://loveky.github.io/2018/07/05/config-lantern-as-shell-proxy/</link>
      <pubDate>Thu, 05 Jul 2018 11:01:54 +0800</pubDate>
      
      <guid>https://loveky.github.io/2018/07/05/config-lantern-as-shell-proxy/</guid>
      <description>蓝灯是个好工具。可以帮忙我们访问一些由于众所周知的原因在国内无法正常访问的网站(比如 Google、Stack Overflow、Medium 等等)。
每次启动蓝灯，它会自动修改操作系统的网络代理指向它自己。不需要我们手动配置，很是方便。
需要网络代理的地方其实不止是浏览器，很多命令行工具也会访问网络。比如，我们通过 homebrew 安装 dart 的时候，brew 命令会从 Google 的服务器上下载安装文件。然后你就会看到网络连接错误的提示信息。
要解决这类问题，只需要为 Shell 设置两个环境变量 HTTP_PROXY 和 HTTPS_PROXY 即可。我们直接利用蓝灯在本地启动好的代理端口。
我们首先找到蓝灯在本地启动的具体端口号。打开蓝灯，依次选择 Settings -&amp;gt; ADVANCED SETTINGS 即可看到蓝灯在本地选择的端口号。
然后去 Shell 里执行以下两个命令设置环境变量：
export HTTP_PROXY=http://127.0.0.1:51350 export HTTPS_PROXY=http://127.0.0.1:51350 就完成配置了。
最后为了避免每次都要敲这么长的命令，我们写一个 Shell 函数：
# http proxy util hp() { if [ &amp;#34;$1&amp;#34; = &amp;#34;enable&amp;#34; ] then PORT=&amp;#34;51350&amp;#34; if [ -n &amp;#34;$2&amp;#34; ] then PORT=&amp;#34;$2&amp;#34; fi export HTTP_PROXY=http://127.0.0.1:$PORT export HTTPS_PROXY=http://127.0.0.1:$PORT else export HTTP_PROXY=&amp;#34;&amp;#34; export HTTPS_PROXY=&amp;#34;&amp;#34; fi } 把这都函数代码放到 Shell 启动脚本里。然后需要开启代理的时候执行 hp enable 即可，或是指定代理端口号 hp enable 33333。关闭代理执行 hp 即可。</description>
    </item>
    
    <item>
      <title>Flutter 初体验</title>
      <link>https://loveky.github.io/2018/07/04/flutter-first-experience/</link>
      <pubDate>Wed, 04 Jul 2018 22:57:32 +0800</pubDate>
      
      <guid>https://loveky.github.io/2018/07/04/flutter-first-experience/</guid>
      <description>初识 Flutter 还是在上个月的 GMTC 大会上。来自 Google 的工程师现场演示了如何使用 Flutter 构建美观、高性能的移动应用。个人对其中一些特性，比如良好的开发者体验、优秀的跨平台能力很感兴趣。于是决定在会后亲自体验一下。
最近几天尝试使用 Flutter 把京东 APP 中的排行榜频道的首屏布局实现了一下，算是对基于 Flutter 的开发有了一个最简单的了解，特地记录一下，方便其他想了解、尝试 Flutter 框架的小伙伴。
首先看看我实现了一个什么样的界面：
接下来让我们从不同方面说说 Flutter 的开发。
Flutter 开发环境搭建 安装 Flutter 不同平台的安装流程基本一致，这里就以 macOS 为例。首先下载 flutter macOS 版，并解压。
把 Flutter 的 bin 目录添加到系统 PATH 中：
export PATH=~/Software/flutter/bin:$PATH 提示：记得把这行代码放到你的 shell 启动脚本中，避免每次都要手动执行。
路径添加完成后就可以执行 flutter 命令啦。 Flutter 提供了一个 flutter doctor 命令协助我们安装 Flutter 的依赖。它会检查本地是否有 iOS 和 Android 的开发环境。如果检测到依赖缺失，它还会给出对应依赖的安装方法。你只需要不断执行该方法，然后安装缺失的依赖，直到全部依赖安装完成即可。
配置代码编辑器 主要是给 IDE 安装相关插件。
VS Code 上只需要安装 flutter 扩展即可。 Android Studio 上需要安装 flutter 和 dart 两个插件。</description>
    </item>
    
  </channel>
</rss>