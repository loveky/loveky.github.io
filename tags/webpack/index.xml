<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>webpack on loveky</title>
    <link>https://loveky.github.io/tags/webpack/</link>
    <description>Recent content in webpack on loveky</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 26 Feb 2018 10:44:38 +0800</lastBuildDate>
    
	<atom:link href="https://loveky.github.io/tags/webpack/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>聊聊 package.json 文件中的 module 字段</title>
      <link>https://loveky.github.io/2018/02/26/tree-shaking-and-pkg.module/</link>
      <pubDate>Mon, 26 Feb 2018 10:44:38 +0800</pubDate>
      
      <guid>https://loveky.github.io/2018/02/26/tree-shaking-and-pkg.module/</guid>
      <description>本文来和大家聊聊 pkg.module 字段的功能以及使用场景。
在谈 pkg.module 之前，让我们先来了解一个和它有着紧密关系的概念 —— Tree Shaking。
什么是 Tree Shaking？ 让我们通过两个小例子来了解。
假设我们有以下两个文件：
// math.js exports.add1 = function (x) { return x + 1; } exports.add2 = function (x) { return x + 2; } // app.js import { add1 } from &amp;#39;./math&amp;#39;; add1(100);  app.js 文件通过 import 引入了 math.js 中的 add1 方法。
我们通过 webpack 命令打包：
webpack --entry ./app.js --output-filename app.bunble.js 在生成的 app.bundle.js 文件中我们可以看到以下内容：
这里我们可以看到虽然我们只用到了 math.js 文件中的 add1 方法，但是在最终生成的 bundle 文件中却包含了 add1 和 add2 两个方法。这是为什么呢？</description>
    </item>
    
    <item>
      <title>Webpack2中的NamedModulesPlugin与HashedModuleIdsPlugin</title>
      <link>https://loveky.github.io/2017/03/29/webpack-module-ids/</link>
      <pubDate>Wed, 29 Mar 2017 21:19:24 +0800</pubDate>
      
      <guid>https://loveky.github.io/2017/03/29/webpack-module-ids/</guid>
      <description>要讨论Webpack 2中新增的这两个plugin的功能，还要先从使用Webpack打包的项目的前端资源缓存方案说起。
通常在使用了Webpack的项目中我们会使用CommonsChunkPlugin来将所有依赖的第三方包打包到一个名为vender的chunk中。与此同时，为了避免每次更改项目代码时导致vender chunk的chunkHash改变，我们还会单独生成一个manifest chunk。
举个例子，假设我们有一个项目，项目中入口文件为index.js。其内容如下：
import add from &amp;#39;./src/add&amp;#39;; import leftPad from &amp;#39;left-pad&amp;#39;; import jsonp from &amp;#39;jsonp&amp;#39;; add(1, 2);  通常我们的webpack.config.js文件就会有类似如下的配置：
const path = require(&amp;#39;path&amp;#39;); const webpack = require(&amp;#39;webpack&amp;#39;); module.exports = { entry: { &amp;#39;app&amp;#39;: &amp;#39;./index.js&amp;#39;, &amp;#39;vender&amp;#39;: [&amp;#39;left-pad&amp;#39;, &amp;#39;jsonp&amp;#39;] }, output: { filename: &amp;#39;[name].[chunkHash].js&amp;#39;, path: path.resolve(__dirname, &amp;#39;build&amp;#39;) }, resolve: { extensions: [&amp;#39;.js&amp;#39;] }, module: { ... }, plugins:[ new webpack.optimize.CommonsChunkPlugin({ name: [&amp;#39;vender&amp;#39;, &amp;#39;manifest&amp;#39;], minChunks: Infinity, }) ] };  这时，通过Webpack打包，会生成三个文件：</description>
    </item>
    
  </channel>
</rss>